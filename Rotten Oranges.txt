
import java.util.*;
import java.lang.*;
import java.io.*;

public class Main {
	
	  public static void main (String[] args) throws IOException {
		  Scanner sc = new Scanner(System.in);
	        int n = sc.nextInt();
	        int m = sc.nextInt();
	        int [][] arr= new int[n][m];
	        for(int i=0;i<n;i++){
	            for(int j=0;j<m;j++){
	                arr[i][j]=sc.nextInt();
	            }
	        }
	        Solution obj= new Solution();
	        
	        System.out.println(obj.orangesRotting(arr));
		}
}
class Solution{     
    static class Pair{
        int row;
        int col;
        Pair(int row,int col){
            this.row=row;
            this.col=col;
        }
    }
	 public static int orangesRotting(int[][] grid) {
         int n=grid.length;
         int m=grid[0].length;
         Queue<Pair> que=new ArrayDeque<>();

         //fill the queue with all initial rotten oranges cordinates (row,col)
         for(int i=0;i<n;i++){
             for(int j=0;j<m;j++){
                 if(grid[i][j]==2) //is a rotten orange so put in queue
                     que.add(new Pair(i,j));
             }
         }
         //BFS
         int level=0;
         while(que.size()>0){
             int size=que.size();
             while (size-- > 0) {
                 Pair p=que.remove();
                 int r=p.row;
                 int c=p.col;
                 //up row-1
                 if((r-1)>=0 && grid[r-1][c]==1){//is a fresh orange then rotten it
                     grid[r-1][c]=2;
                     que.add(new Pair(r-1,c));
                 }
                 //down row+1
                 if((r+1)<n && grid[r+1][c]==1){
                     grid[r+1][c]=2;
                     que.add(new Pair(r+1,c));
                 }
                 //left  col-1
                 if((c-1)>=0 && grid[r][c-1]==1){
                     grid[r][c-1]=2;
                     que.add(new Pair(r,c-1));
                 }
                 //right col+1
                 if((c+1)<m && grid[r][c+1]==1){
                     grid[r][c+1]=2;
                     que.add(new Pair(r,c+1));
                 }    
             }
             level++;
         }
         //after checking all if still there are fresh orange 
         //means grid[i][j]==1 then we ddint rotten up all orange so return -1
         for(int i=0;i<n;i++){
             for(int j=0;j<m;j++){
                 if(grid[i][j]==1){
                     return -1;
                 }
             }
         }
         //level is remain 0 then return 0
         if(level==0){
             return 0;
         }
         return level-1;//exact time to rotten up all orange
    }
}
